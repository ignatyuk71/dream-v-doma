<?php

namespace App\Http\Controllers\Api;

use App\Http\Controllers\Controller;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\DB;
use App\Services\MetaCapi;

/**
 * –ö–æ–Ω—Ç—Ä–æ–ª–µ—Ä —Å–µ—Ä–≤–µ—Ä–Ω–∏—Ö –ø–æ–¥—ñ–π –¥–ª—è Meta CAPI.
 * –ö–æ–∂–µ–Ω –ø—É–±–ª—ñ—á–Ω–∏–π –º–µ—Ç–æ–¥ ‚Äî —Ü–µ –µ–Ω–¥–ø–æ–π–Ω—Ç –ø–æ–¥—ñ—ó (PV/VC/ATC/IC/Lead),
 * —è–∫—ñ –∑–≤–æ–¥—è—Ç—å—Å—è —É —Å–ø—ñ–ª—å–Ω—É –ª–æ–≥—ñ–∫—É —á–µ—Ä–µ–∑ handleEvent().
 */
class TrackController extends Controller
{

    /**
     * CAPI: PageView
     * –ü—Ä–∏–π–º–∞—î –∑ —Ñ—Ä–æ–Ω—Ç–∞: event_id (–æ–ø—Ü.), page_url (–æ–ø—Ü.)
     * –í—ñ–¥–ø—Ä–∞–≤–ª—è—î —É Meta: PageView –∑ user_data (IP/UA + fbc/fbp)
     */
    public function pv(Request $req)
    {
        // 1) –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
        $t = DB::table('tracking_settings')->first();
        if (!$t) {
            return response()->json(['ok' => false, 'skip' => 'no_settings'], 200);
        }

        // CAPI –º–∞—î –±—É—Ç–∏ —É–≤—ñ–º–∫–Ω–µ–Ω–æ, —ñ –º–∞—é—Ç—å –±—É—Ç–∏ pixel_id + token
        if ((int)($t->capi_enabled ?? 0) !== 1 || empty($t->pixel_id) || empty($t->capi_token)) {
            return response()->json(['ok' => false, 'skip' => 'capi_disabled_or_missing_creds'], 200);
        }

        // –ù–µ —Å—Ç—Ä—ñ–ª—è—î–º–æ –∑ –∞–¥–º—ñ–Ω-–∑–æ–Ω (–∑–∞ –ø—Ä–∞–≤–∏–ª–æ–º exclude_admin)
        if ((int)($t->exclude_admin ?? 1) === 1 && $req->is('admin*')) {
            return response()->json(['ok' => false, 'skip' => 'admin_excluded'], 200);
        }

        // –°—å–æ–≥–æ–¥–Ω—ñ –ø—Ä–∞—Ü—é—î–º–æ –ª–∏—à–µ –∑ PageView ‚Äî –ø—Ä–∞–ø–æ—Ä–µ—Ü—å –º–∞—î –¥–æ–∑–≤–æ–ª—è—Ç–∏
        if (!(bool)($t->send_page_view ?? true)) {
            return response()->json(['ok' => false, 'skip' => 'page_view_disabled'], 200);
        }

        // 2) –ü–æ–±—É–¥–æ–≤–∞ –ø–æ–¥—ñ—ó
        $eventId = (string)($req->input('event_id') ?: ('pv-'.bin2hex(random_bytes(4)).'-'.time()));
        $eventSourceUrl = $this->eventSourceUrl($req) ?? url()->current();

        $userData = $this->collectUserData($req, $eventSourceUrl);

        $event = [
            'event_name'       => 'PageView',
            'event_time'       => time(),                 // unix seconds
            'action_source'    => 'website',
            'event_source_url' => $eventSourceUrl,
            'event_id'         => $eventId,
            'user_data'        => $userData,
        ];

        // 3) –í—ñ–¥–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤—ñ—Å
        $apiVersion = $t->capi_api_version ?: 'v20.0';
        $testCode   = $t->capi_test_code ?: null;

        $meta = new MetaCapi($t->pixel_id, $t->capi_token, $apiVersion);
        $resp = $meta->send([$event], $testCode);

        // 4) –í—ñ–¥–ø–æ–≤—ñ–¥—å —Ñ—Ä–æ–Ω—Ç—É (–ª–æ–≥—É–≤–∞–Ω–Ω—è —Ä–æ–±–∏—Ç—å —Å–µ—Ä–≤—ñ—Å)
        return response()->json([
            'ok'        => $resp->successful(),
            'status'    => $resp->status(),
            'event_id'  => $eventId,
        ], 200);
    }

   
    /**
     * ViewContent ‚Äî –ø–æ–¥—ñ—è –ø–µ—Ä–µ–≥–ª—è–¥—É —Ç–æ–≤–∞—Ä—É/–∫–æ–Ω—Ç–µ–Ω—Ç—É.
     *
     * üîπ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –¥–ª—è –≤—ñ–¥—Å–ª—ñ–¥–∫–æ–≤—É–≤–∞–Ω–Ω—è –≤—ñ–¥–≤—ñ–¥—É–≤–∞–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏ —Ç–æ–≤–∞—Ä—É.
     * üîπ Meta —Ä–µ–∫–æ–º–µ–Ω–¥—É—î –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ –º–∞—Å–∏–≤ contents[] —É —Ñ–æ—Ä–º–∞—Ç—ñ:
     *     [{ "id": "SKU123", "quantity": 1, "item_price": 399.00 }]
     * üîπ –Ø–∫—â–æ contents[] –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–µ ‚Äî –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ "—Ñ–æ–ª–±–µ–∫" –∑ id/sku/price/quantity.
     * üîπ –ó–Ω–∞—á–µ–Ω–Ω—è value = —Å—É–º–∞ (—Ü—ñ–Ω–∞ * –∫—ñ–ª—å–∫—ñ—Å—Ç—å).
     * üîπ –í–∞–ª—é—Ç–∞ –±–µ—Ä–µ—Ç—å—Å—è –∑ –∑–∞–ø–∏—Ç—É –∞–±–æ –∑ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å (default = UAH).
     */
    
     public function vc(\Illuminate\Http\Request $req)
     {
         // 1) –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
         $t = \DB::table('tracking_settings')->first();
         if (!$t) {
             return response()->json(['ok' => false, 'skip' => 'no_settings'], 200);
         }
     
         if ((int)($t->capi_enabled ?? 0) !== 1 || empty($t->pixel_id) || empty($t->capi_token)) {
             return response()->json(['ok' => false, 'skip' => 'capi_disabled_or_missing_creds'], 200);
         }
     
         // –í–∏–º–∫–Ω—É—Ç–∏ –∑ –∞–¥–º—ñ–Ω-–∑–æ–Ω (–ø–ª—é—Å –ø—ñ–¥—Å—Ç—Ä–∞—Ö–æ–≤–∫–∞ –ø–æ URL)
         if ((int)($t->exclude_admin ?? 1) === 1) {
             $path = (string) parse_url($req->fullUrl(), PHP_URL_PATH);
             if ($req->is('admin*') || str_contains($path, '/admin')) {
                 return response()->json(['ok' => false, 'skip' => 'admin_excluded'], 200);
             }
         }
     
         // –î–æ–∑–≤—ñ–ª —Å–∞–º–µ –Ω–∞ VC
         if (!(bool)($t->send_view_content ?? true)) {
             return response()->json(['ok' => false, 'skip' => 'view_content_disabled'], 200);
         }
     
         // 2) –ü–æ–¥—ñ—è
         $eventId        = (string)($req->input('event_id') ?: ('vc-'.bin2hex(random_bytes(4)).'-'.time()));
         $eventSourceUrl = $this->eventSourceUrl($req) ?? url()->current();
         $userData       = $this->collectUserData($req, $eventSourceUrl); // IP/UA + fbc/fbp (–∑ –≤–∞–ª—ñ–¥–∞—Ü—ñ—î—é fbclid —É collectUserData)
     
         // 3) –î–∞–Ω—ñ —Ç–æ–≤–∞—Ä—É: –∞–±–æ product{...}, –∞–±–æ contents[]
         $p        = (array)($req->input('product') ?? []);
         $sku      = isset($p['sku']) ? (string)$p['sku'] : null;
         $id       = isset($p['id'])  ? (string)$p['id']  : null;
         $cid      = $sku ?: $id; // content_id (–∫—Ä–∞—â–µ SKU)
         if (!$cid) {
             return response()->json(['ok' => false, 'skip' => 'missing_content_id'], 200);
         }
     
         $name     = isset($p['name']) ? (string)$p['name'] : null;
         $cat      = isset($p['category']) ? (string)$p['category'] : null;
         $currency = isset($p['currency']) && $p['currency'] ? strtoupper((string)$p['currency']) : strtoupper($t->default_currency ?? 'UAH');
     
         // –Ø–∫—â–æ –ø—Ä–∏–π—à–æ–≤ –º–∞—Å–∏–≤ contents[] ‚Äî –Ω–æ—Ä–º–∞–ª—ñ–∑—É—î–º–æ —ñ –ø–µ—Ä–µ—Ä–∞—Ö—É—î–º–æ value
         $contentsIn = $req->input('contents');
         $contents   = [];
         $totalValue = null;
     
         if (is_array($contentsIn) && !empty($contentsIn)) {
             $sum = 0.0;
             foreach ($contentsIn as $row) {
                 $row = (array)$row;
                 $iid = (string)($row['id'] ?? $cid);
                 $qty = max(1, (int)($row['quantity'] ?? 1));
                 $ip  = (float)($row['item_price'] ?? 0);
                 if ($ip < 0) $ip = 0.0;
     
                 $contents[] = [
                     'id'         => $iid,
                     'quantity'   => $qty,
                     'item_price' => $ip,
                 ];
                 $sum += $ip * $qty;
             }
             $totalValue = round($sum, 2);
         } else {
             // –§–æ–ª–±–µ–∫: 1 —Ç–æ–≤–∞—Ä —ñ–∑ —Ü—ñ–Ω–æ—é, —è–∫—â–æ –≤–æ–Ω–∞ —î
             $value = array_key_exists('price', $p) && $p['price'] !== null ? (float)$p['price'] : null;
             if ($value !== null && $value < 0) $value = 0.0;
     
             if ($value !== null) {
                 $contents   = [[ 'id' => $cid, 'quantity' => 1, 'item_price' => $value ]];
                 $totalValue = round($value, 2);
             }
         }
     
         // 4) custom_data –¥–ª—è VC
         $custom = [
             'content_type' => 'product',
             'content_ids'  => [$cid],
         ];
         if (!empty($contents))             $custom['contents']         = $contents;
         if ($name)                         $custom['content_name']     = $name;
         if ($cat)                          $custom['content_category'] = $cat;
         if ($totalValue !== null) {
             $custom['value']    = $totalValue;
             $custom['currency'] = $currency;
         }
     
         // 5) –ó–±–∏—Ä–∞–Ω–Ω—è —ñ –≤—ñ–¥–ø—Ä–∞–≤–∫–∞
         $event = [
             'event_name'       => 'ViewContent',
             'event_time'       => time(),
             'action_source'    => 'website',
             'event_source_url' => $eventSourceUrl,
             'event_id'         => $eventId,
             'user_data'        => $userData,
             'custom_data'      => $custom,
         ];
     
         $meta = new \App\Services\MetaCapi($t->pixel_id, $t->capi_token, $t->capi_api_version ?: 'v20.0');
         $resp = $meta->send([$event], $t->capi_test_code ?: null);
     
         return response()->json([
             'ok'       => $resp->successful(),
             'status'   => $resp->status(),
             'event_id' => $eventId,
         ], 200);
     }
     
    
    /**
     * CAPI: AddToCart
     * –û—á—ñ–∫—É—î –∑ —Ñ—Ä–æ–Ω—Ç–∞ (JSON):
     * {
     *   "event_id": "atc-... (–æ–ø—Ü.)",
     *   "page_url": "https://... (–æ–ø—Ü.)",
     *   "currency": "UAH|USD|...",
     *   "contents": [{ "id":"SKU", "quantity":1, "item_price":399.00 }, ...],
     *   "name": "–ù–∞–∑–≤–∞ —Ç–æ–≤–∞—Ä—É (–æ–ø—Ü.)"
     * }
     */
    public function atc(\Illuminate\Http\Request $req)
    {
        // 1) –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
        $t = \DB::table('tracking_settings')->first();
        if (!$t) {
            return response()->json(['ok' => false, 'skip' => 'no_settings'], 200);
        }

        // CAPI –º–∞—î –±—É—Ç–∏ —É–≤—ñ–º–∫–Ω–µ–Ω–∏–π —ñ –º–∞—é—Ç—å –±—É—Ç–∏ –∫—Ä–µ–¥–µ–Ω—à—ñ–∞–ª–∏
        if ((int)($t->capi_enabled ?? 0) !== 1 || empty($t->pixel_id) || empty($t->capi_token)) {
            return response()->json(['ok' => false, 'skip' => 'capi_disabled_or_missing_creds'], 200);
        }

        // –í–∏–∫–ª—é—á–∏—Ç–∏ –∞–¥–º—ñ–Ω-–∑–æ–Ω–∏ (–ø—ñ–¥—Å—Ç—Ä–∞—Ö–æ–≤–∫–∞ —ñ –ø–æ URL-—à–ª—è—Ö—É)
        if ((int)($t->exclude_admin ?? 1) === 1) {
            $path = (string) parse_url($req->fullUrl(), PHP_URL_PATH);
            if ($req->is('admin*') || str_contains($path, '/admin')) {
                return response()->json(['ok' => false, 'skip' => 'admin_excluded'], 200);
            }
        }

        // –ü–æ–¥—ñ—è –º–∞—î –±—É—Ç–∏ –¥–æ–∑–≤–æ–ª–µ–Ω–∞
        if ((int)($t->send_add_to_cart ?? 1) !== 1) {
            return response()->json(['ok' => false, 'skip' => 'add_to_cart_disabled'], 200);
        }

        // 2) –ó–∞–≥–æ–ª–æ–≤–∫–∏ –ø–æ–¥—ñ—ó
        $eventId        = (string)($req->input('event_id') ?: ('atc-'.bin2hex(random_bytes(4)).'-'.time()));
        $eventSourceUrl = $this->eventSourceUrl($req) ?? url()->current();
        $userData       = $this->collectUserData($req, $eventSourceUrl); // IP/UA + fbc/fbp –∑ –≤–∞–ª—ñ–¥. fbclid

        // 3) –î–∞–Ω—ñ –∫–æ—à–∏–∫–∞ –∑ —Ç—ñ–ª–∞
        $currency = strtoupper((string)($req->input('currency') ?: ($t->default_currency ?? 'UAH')));
        $name     = $req->filled('name') ? (string)$req->input('name') : null;

        // contents[]
        $contentsIn = $req->input('contents');
        if (!is_array($contentsIn) || empty($contentsIn)) {
            return response()->json(['ok' => false, 'skip' => 'missing_contents'], 200);
        }

        $contents   = [];
        $sum        = 0.0;
        foreach ($contentsIn as $row) {
            $row = (array)$row;

            $id  = isset($row['id']) ? trim((string)$row['id']) : '';
            if ($id === '') continue;

            $qty = isset($row['quantity']) ? (int)$row['quantity'] : 1;
            if ($qty <= 0) $qty = 1;

            $ip  = isset($row['item_price']) ? (float)$row['item_price'] : 0.0;
            if ($ip < 0) $ip = 0.0;

            $contents[] = [
                'id'         => $id,
                'quantity'   => $qty,
                'item_price' => $ip,
            ];
            $sum += $qty * $ip;
        }

        if (empty($contents)) {
            return response()->json(['ok' => false, 'skip' => 'empty_contents_after_norm'], 200);
        }

        $value = round($sum, 2);
        $contentIds = array_values(array_map(fn($c) => (string)$c['id'], $contents));

        // 4) –ó–±–∏—Ä–∞–Ω–Ω—è –ø–æ–¥—ñ—ó
        $event = [
            'event_name'       => 'AddToCart',
            'event_time'       => time(),
            'action_source'    => 'website',
            'event_source_url' => $eventSourceUrl,
            'event_id'         => $eventId,
            'user_data'        => $userData,
            'custom_data'      => array_filter([
                'content_type'     => 'product',
                'content_ids'      => $contentIds,
                'contents'         => $contents,
                'value'            => $value,
                'currency'         => $currency,
                'content_name'     => $name, // –æ–ø—Ü—ñ–π–Ω–æ
            ], static fn($v) => $v !== null),
        ];

        // 5) –í—ñ–¥–ø—Ä–∞–≤–∫–∞ —É Meta
        $apiVersion = $t->capi_api_version ?: 'v20.0';
        $testCode   = $t->capi_test_code ?: null;

        $meta = new \App\Services\MetaCapi($t->pixel_id, $t->capi_token, $apiVersion);
        $resp = $meta->send([$event], $testCode);

        return response()->json([
            'ok'       => $resp->successful(),
            'status'   => $resp->status(),
            'event_id' => $eventId,
        ], 200);
    }




    
    /**
     * CAPI: InitiateCheckout
     * –û—á—ñ–∫—É—î JSON:
     * {
     *   "event_id": "ic-..."              (–æ–ø—Ü.)
     *   "page_url": "https://..."         (–æ–ø—Ü.)
     *   "currency": "UAH|USD|..."         (–æ–ø—Ü.; fallback -> settings.default_currency)
     *   "contents": [                     (–æ–±–æ–≤‚Äô—è–∑–∫–æ–≤–æ; ‚â•1 –≤–∞–ª—ñ–¥–Ω–∏–π item)
     *     { "id":"SKU", "quantity":1, "item_price":399.00 }, ...
     *   ],
     *   "num_items": 3                    (–æ–ø—Ü.; —è–∫—â–æ –Ω–µ–º–∞ ‚Äî —Ä–∞—Ö—É—î–º–æ —ñ–∑ contents)
     *   "name": "–ü–µ—Ä—à–∏–π —Ç–æ–≤–∞—Ä"            (–æ–ø—Ü.)
     *   "value": 1197.00                  (–æ–ø—Ü.; —è–∫—â–æ –Ω–µ–º–∞ ‚Äî —Ä–∞—Ö—É—î–º–æ —ñ–∑ contents)
     * }
     */
    public function ic(Request $req)
    {
        // 1) –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
        $t = DB::table('tracking_settings')->first();
        if (!$t) {
            return response()->json(['ok' => false, 'skip' => 'no_settings'], 200);
        }

        // CAPI –≤–º–∏–∫–Ω–µ–Ω–æ —Ç–∞ —î –∫—Ä–µ–¥–µ–Ω—à—ñ–∞–ª–∏
        if ((int)($t->capi_enabled ?? 0) !== 1 || empty($t->pixel_id) || empty($t->capi_token)) {
            return response()->json(['ok' => false, 'skip' => 'capi_disabled_or_missing_creds'], 200);
        }

        // –í–∏–∫–ª—é—á–∏—Ç–∏ –∞–¥–º—ñ–Ω-–∑–æ–Ω–∏
        if ((int)($t->exclude_admin ?? 1) === 1 && $req->is('admin*')) {
            return response()->json(['ok' => false, 'skip' => 'admin_excluded'], 200);
        }

        // –ü–æ–¥—ñ—è –¥–æ–∑–≤–æ–ª–µ–Ω–∞?
        if ((int)($t->send_initiate_checkout ?? 0) !== 1) {
            return response()->json(['ok' => false, 'skip' => 'initiate_checkout_disabled'], 200);
        }

        // 2) –ó–∞–≥–æ–ª–æ–≤–∫–∏ –ø–æ–¥—ñ—ó
        $eventId        = (string)($req->input('event_id') ?: ('ic-'.bin2hex(random_bytes(4)).'-'.time()));
        $eventSourceUrl = $this->eventSourceUrl($req) ?? url()->current();
        $userData       = $this->collectUserData($req, $eventSourceUrl);

        // 3) –î–∞–Ω—ñ –∫–æ—à–∏–∫–∞
        $currency = strtoupper((string)($req->input('currency') ?: ($t->default_currency ?? 'UAH')));
        $name     = $req->filled('name') ? (string)$req->input('name') : null;

        // contents[]
        $contentsIn = $req->input('contents');
        if (!is_array($contentsIn) || empty($contentsIn)) {
            return response()->json(['ok' => false, 'skip' => 'missing_contents'], 200);
        }

        $contents   = [];
        $sum        = 0.0;
        $itemsCount = 0;

        foreach ($contentsIn as $row) {
            $row = (array)$row;

            $id = isset($row['id']) ? trim((string)$row['id']) : '';
            if ($id === '') continue;

            $qty = isset($row['quantity']) ? (int)$row['quantity'] : 1;
            if ($qty <= 0) $qty = 1;

            $ip = isset($row['item_price']) ? (float)$row['item_price'] : 0.0;
            if ($ip < 0) $ip = 0.0;

            $contents[] = [
                'id'         => $id,
                'quantity'   => $qty,
                'item_price' => $ip,
            ];
            $sum        += $qty * $ip;
            $itemsCount += $qty;
        }

        if (empty($contents)) {
            return response()->json(['ok' => false, 'skip' => 'empty_contents_after_norm'], 200);
        }

        // num_items / value ‚Äî –±–µ—Ä–µ–º–æ –∑ —Ç—ñ–ª–∞ –∞–±–æ —Ä–∞—Ö—É—î–º–æ
        $numItems = $req->filled('num_items') ? max(0, (int)$req->input('num_items')) : $itemsCount;
        $value    = $req->filled('value')     ? round((float)$req->input('value'), 2) : round($sum, 2);

        $contentIds = array_values(array_map(fn($c) => (string)$c['id'], $contents));

        // 4) –ü–æ–¥—ñ—è
        $event = [
            'event_name'       => 'InitiateCheckout',
            'event_time'       => time(),
            'action_source'    => 'website',
            'event_source_url' => $eventSourceUrl,
            'event_id'         => $eventId,
            'user_data'        => $userData,
            'custom_data'      => array_filter([
                'content_type'     => 'product',
                'content_ids'      => $contentIds,
                'contents'         => $contents,
                'num_items'        => $numItems,
                'value'            => $value,
                'currency'         => $currency,
                'content_name'     => $name, // –æ–ø—Ü—ñ–π–Ω–æ
            ], static fn($v) => $v !== null),
        ];

        // 5) –í—ñ–¥–ø—Ä–∞–≤–∫–∞ —É Meta
        $apiVersion = $t->capi_api_version ?: 'v20.0';
        $testCode   = $t->capi_test_code ?: null;

        $meta = new MetaCapi($t->pixel_id, $t->capi_token, $apiVersion);
        $resp = $meta->send([$event], $testCode);

        return response()->json([
            'ok'       => $resp->successful(),
            'status'   => $resp->status(),
            'event_id' => $eventId,
        ], 200);
    }


    /**
     * Lead ‚Äî –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ª—ñ–¥-–ø–æ–¥—ñ—ó –∑ –¥–æ–≤—ñ–ª—å–Ω–∏–º–∏ –ø–æ–ª—è–º–∏ content_name/status/value.
     */
    public function lead(Request $request)
    {
        return $this->handleEvent('Lead', $request, function () use ($request) {
            return [
                'content_name' => $request->input('content_name', 'lead'),
                'status'       => $request->input('status', 'submitted'),
                'value'        => $this->num($request->input('value', 0)),
                'currency'     => $request->input('currency', $this->currency()),
            ];
        }, flag: 'send_lead');
    }

    /**
     * CAPI: Purchase
     * –û—á—ñ–∫—É—î JSON:
     * {
     *   "event_id": "purchase-...",              // –æ–ø—Ü.
     *   "page_url": "https://...",               // –æ–ø—Ü.
     *   "currency": "UAH|USD|...",               // –æ–ø—Ü. (fallback: settings.default_currency)
     *   "contents": [                            // –æ–±–æ–≤'—è–∑–∫–æ–≤–æ: ‚â•1
     *     { "id":"SKU", "quantity":1, "item_price":399.00 }, ...
     *   ],
     *   "num_items": 3,                          // –æ–ø—Ü. (—è–∫—â–æ –Ω–µ–º–∞ ‚Äî —Ä–∞—Ö—É—î–º–æ)
     *   "value": 1299.00,                        // –æ–ø—Ü. (—è–∫—â–æ –Ω–µ–º–∞ ‚Äî subtotal + shipping + tax)
     *   "shipping": 0,                           // –æ–ø—Ü.
     *   "tax": 0,                                // –æ–ø—Ü.
     *   "order_number": "A12345",                // –æ–ø—Ü. (–¥–ª—è —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è)
     *
     *   // –æ–ø—Ü—ñ–π–Ω–æ –¥–ª—è –∫—Ä–∞—â–æ–≥–æ –º–∞—Ç—á—ñ–Ω–≥—É (–±–µ–∫ —ó—Ö –•–ï–®–£–Ñ —É user_data):
     *   "email": "user@example.com",
     *   "phone": "+380501112233",
     *   "first_name": "Ivan",
     *   "last_name": "Petrenko",
     *   "external_id": "uid_123"
     * }
     */
    public function purchase(Request $req)
    {
        // 1) –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
        $t = DB::table('tracking_settings')->first();
        if (!$t) return response()->json(['ok'=>false,'skip'=>'no_settings'], 200);

        if ((int)($t->capi_enabled ?? 0) !== 1 || empty($t->pixel_id) || empty($t->capi_token)) {
            return response()->json(['ok'=>false,'skip'=>'capi_disabled_or_missing_creds'], 200);
        }

        if ((int)($t->exclude_admin ?? 1) === 1 && $req->is('admin*')) {
            return response()->json(['ok'=>false,'skip'=>'admin_excluded'], 200);
        }

        if ((int)($t->send_purchase ?? 0) !== 1) {
            return response()->json(['ok'=>false,'skip'=>'purchase_disabled'], 200);
        }

        // 2) –ó–∞–≥–æ–ª–æ–≤–∫–∏ –ø–æ–¥—ñ—ó
        $eventId        = (string)($req->input('event_id') ?: ('purchase-'.bin2hex(random_bytes(4)).'-'.time()));
        $eventSourceUrl = $this->eventSourceUrl($req) ?? url()->current();

        // –ë–∞–∑–æ–≤–∏–π user_data (IP/UA + fbc/fbp)
        $userData = $this->collectUserData($req, $eventSourceUrl);

        // –î–æ–¥–∞—Ç–∫–æ–≤–∏–π PII ‚Üí —Ö–µ—à —É user_data
        $userData = array_merge($userData, $this->hashPiiFromRequest($req));

        // 3) –î–∞–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
        $currency = strtoupper((string)($req->input('currency') ?: ($t->default_currency ?? 'UAH')));

        $contentsIn = $req->input('contents');
        if (!is_array($contentsIn) || empty($contentsIn)) {
            return response()->json(['ok'=>false,'skip'=>'missing_contents'], 200);
        }

        $contents   = [];
        $sum        = 0.0;
        $itemsCount = 0;

        foreach ($contentsIn as $row) {
            $row = (array)$row;

            $id = isset($row['id']) ? trim((string)$row['id']) : '';
            if ($id === '') continue;

            $qty = isset($row['quantity']) ? (int)$row['quantity'] : 1;
            if ($qty <= 0) $qty = 1;

            $ip = isset($row['item_price']) ? (float)$row['item_price'] : 0.0;
            if ($ip < 0) $ip = 0.0;

            $contents[] = [
                'id'         => $id,
                'quantity'   => $qty,
                'item_price' => $ip,
            ];
            $sum        += $qty * $ip;
            $itemsCount += $qty;
        }
        if (empty($contents)) {
            return response()->json(['ok'=>false,'skip'=>'empty_contents_after_norm'], 200);
        }

        $shipping = $req->filled('shipping') ? max(0, (float)$req->input('shipping')) : 0.0;
        $tax      = $req->filled('tax')      ? max(0, (float)$req->input('tax'))      : 0.0;

        // value/num_items
        $numItems = $req->filled('num_items') ? max(0, (int)$req->input('num_items')) : $itemsCount;
        $value    = $req->filled('value')     ? round((float)$req->input('value'), 2) : round($sum + $shipping + $tax, 2);

        $orderNo  = $req->filled('order_number') ? (string)$req->input('order_number') : null;
        $contentIds = array_values(array_map(fn($c) => (string)$c['id'], $contents));

        // 4) –ü–æ–¥—ñ—è
        $event = [
            'event_name'       => 'Purchase',
            'event_time'       => time(),
            'action_source'    => 'website',
            'event_source_url' => $eventSourceUrl,
            'event_id'         => $eventId,
            'user_data'        => $userData,
            'custom_data'      => array_filter([
                'content_type' => 'product',
                'content_ids'  => $contentIds,
                'contents'     => $contents,
                'num_items'    => $numItems,
                'value'        => $value,
                'currency'     => $currency,
                'shipping'     => $shipping,
                'tax'          => $tax,
                'order_number' => $orderNo,
            ], static fn($v) => $v !== null),
        ];

        // 5) –í—ñ–¥–ø—Ä–∞–≤–∫–∞
        $meta = new MetaCapi($t->pixel_id, $t->capi_token, $t->capi_api_version ?: 'v20.0');
        $resp = $meta->send([$event], $t->capi_test_code ?: null);

        return response()->json([
            'ok'       => $resp->successful(),
            'status'   => $resp->status(),
            'event_id' => $eventId,
        ], 200);
    }

    /**
     * PII ‚Üí SHA-256 –∑–≥—ñ–¥–Ω–æ Meta (lowercase/trim/–±–µ–∑ –ø—Ä–æ–±—ñ–ª—ñ–≤, —Ç–µ–ª–µ—Ñ–æ–Ω —É —Ü–∏—Ñ—Ä–∏ –∑ +, email lowercase).
     * –ü–æ–≤–µ—Ä—Ç–∞—î –º–∞—Å–∏–≤ –∑ –∫–ª—é—á–∞–º–∏, —è–∫—ñ –æ—á—ñ–∫—É—î Meta: em, ph, fn, ln, external_id (—É—Å–µ –∑–∞—Ö–µ—à–æ–≤–∞–Ω–µ, –æ–∫—Ä—ñ–º external_id ‚Äî –¥–æ–∑–≤–æ–ª—è—î—Ç—å—Å—è raw –∞–±–æ hashed).
     */
    private function hashPiiFromRequest(Request $req): array
    {
        $out = [];

        $email = $req->input('email');
        if (is_string($email) && $email !== '') {
            $norm = strtolower(trim($email));
            $out['em'] = hash('sha256', $norm);
        }

        $phone = $req->input('phone');
        if (is_string($phone) && $phone !== '') {
            // –Ω–æ—Ä–º–∞–ª—ñ–∑—É—î–º–æ: –ª–∏—à–∞—î–º–æ —Ü–∏—Ñ—Ä–∏; —è–∫—â–æ –±—É–≤ + –Ω–∞ –ø–æ—á–∞—Ç–∫—É ‚Äî –∑–±–µ—Ä—ñ–≥–∞—î–º–æ
            $p = preg_replace('/\D+/', '', $phone);
            if (strpos(trim($phone), '+') === 0) $p = '+' . $p;
            $out['ph'] = hash('sha256', $p);
        }

        $fn = $req->input('first_name');
        if (is_string($fn) && $fn !== '') {
            $out['fn'] = hash('sha256', mb_strtolower(trim($fn)));
        }

        $ln = $req->input('last_name');
        if (is_string($ln) && $ln !== '') {
            $out['ln'] = hash('sha256', mb_strtolower(trim($ln)));
        }

        // external_id: Meta –¥–æ–∑–≤–æ–ª—è—î raw, –∞–ª–µ –∫—Ä–∞—â–µ —Ç–µ–∂ —Ö–µ—à—É–≤–∞—Ç–∏ –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—ñ
        $eid = $req->input('external_id');
        if (is_string($eid) && $eid !== '') {
            $out['external_id'] = hash('sha256', trim($eid));
        }

        return $out;
    }

     /**
     * –í–∏–∑–Ω–∞—á–∞—î–º–æ –¥–∂–µ—Ä–µ–ª–æ URL –ø–æ–¥—ñ—ó:
     * 1) —è–≤–Ω–∏–π page_url –∑ —Ç—ñ–ª–∞; 2) Referer; 3) –ø–æ—Ç–æ—á–Ω–∏–π URL
     */
    private function eventSourceUrl(Request $req): ?string
    {
        if ($u = $req->input('page_url')) return (string)$u;
        if ($r = $req->headers->get('referer')) return (string)$r;
        return $req->fullUrl();
    }

    /**
     * user_data –¥–ª—è CAPI: IP, UA, fbc/fbp (—è–∫—â–æ —î).
     * –Ø–∫—â–æ _fbc –Ω–µ–º–∞—î, –∞–ª–µ —î fbclid —É URL ‚Üí –∑–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ fbc.
     */
    private function collectUserData(Request $req, string $eventSourceUrl): array
    {
        $data = [
            'client_ip_address' => (string)$req->ip(),
            'client_user_agent' => (string)$req->userAgent(),
        ];

        // _fbc/_fbp –∑ –∫—É–∫—ñ (—è–∫—â–æ —î)
        if (is_string($req->cookie('_fbc'))) {
            $v = trim((string)$req->cookie('_fbc'));
            if ($v !== '') $data['fbc'] = $v;
        }
        if (is_string($req->cookie('_fbp'))) {
            $v = trim((string)$req->cookie('_fbp'));
            if ($v !== '') $data['fbp'] = $v;
        }

        // fallback –¥–ª—è fbc: —è–∫—â–æ –Ω–µ–º–∞ –∫—É–∫—ñ, –∞–ª–µ –≤ URL —î fbclid ‚Üí –∑–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ fbc
        if (!isset($data['fbc'])) {
            $fbclid = $this->extractFbclid($eventSourceUrl) ?: $this->extractFbclid($req->fullUrl());
            if (!$fbclid && is_string($req->input('page_url'))) {
                $fbclid = $this->extractFbclid((string)$req->input('page_url'));
            }
            if ($fbclid) {
                // —Ñ–æ—Ä–º–∞—Ç: fb.2.<timestamp>.<fbclid>
                $data['fbc'] = 'fb.2.' . time() . '.' . $fbclid;
            }
        }

        return $data;
    }

    /**
     * –î—ñ—Å—Ç–∞—î–º–æ fbclid —ñ–∑ —Ä—è–¥–∫–∞ URL, —è–∫—â–æ –≤—ñ–Ω —Ç–∞–º —î.
     */
    private function extractFbclid(?string $url): ?string
    {
        if (!$url) return null;
        $parts = parse_url($url);
        if (!isset($parts['query'])) return null;

        parse_str($parts['query'], $qs);
        $fbclid = $qs['fbclid'] ?? null;

        $fbclid = is_string($fbclid) ? trim($fbclid) : null;
        return ($fbclid !== '') ? $fbclid : null;
    }

}
