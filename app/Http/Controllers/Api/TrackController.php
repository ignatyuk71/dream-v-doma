<?php

namespace App\Http\Controllers\Api;

use App\Http\Controllers\Controller;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\DB;
use App\Services\MetaCapi;

/**
 * –ö–æ–Ω—Ç—Ä–æ–ª–µ—Ä —Å–µ—Ä–≤–µ—Ä–Ω–∏—Ö –ø–æ–¥—ñ–π –¥–ª—è Meta CAPI.
 * –ö–æ–∂–µ–Ω –ø—É–±–ª—ñ—á–Ω–∏–π –º–µ—Ç–æ–¥ ‚Äî —Ü–µ –µ–Ω–¥–ø–æ–π–Ω—Ç –ø–æ–¥—ñ—ó (PV/VC/ATC/IC/Lead),
 * —è–∫—ñ –∑–≤–æ–¥—è—Ç—å—Å—è —É —Å–ø—ñ–ª—å–Ω—É –ª–æ–≥—ñ–∫—É —á–µ—Ä–µ–∑ handleEvent().
 */
class TrackController extends Controller
{
    /** –ö–µ—à –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å —É –º–µ–∂–∞—Ö –æ–¥–Ω–æ–≥–æ HTTP-–∑–∞–ø–∏—Ç—É (–º—ñ–Ω—É—Å –∑–∞–π–≤—ñ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –ë–î) */
    private ?object $settingsCache = null;

    /* ===================== PUBLIC ENDPOINTS ===================== */

    /**
     * PageView ‚Äî –±–∞–∑–æ–≤–∞ –ø–æ–¥—ñ—è –ø–µ—Ä–µ–≥–ª—è–¥—É —Å—Ç–æ—Ä—ñ–Ω–∫–∏.
     * –ù—ñ—á–æ–≥–æ –Ω–µ –ø–∏—à–µ–º–æ –≤ custom_data (—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è Meta).
     * –î–µ–¥—É–ø: –±–∞–∂–∞–Ω–æ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç–∏ –∑ —Ñ—Ä–æ–Ω—Ç–∞ —Ç–æ–π —Å–∞–º–∏–π event_id —É fbq —ñ –≤ —Ü–µ–π –µ–Ω–¥–ø–æ–π–Ω—Ç.
     */
    public function pv(Request $request)
    {
        return $this->handleEvent('PageView', $request, function () {
            return []; // PV –±–µ–∑ custom_data
        }, flag: 'send_page_view'); // —è–∫—â–æ –ø—Ä–∞–ø–æ—Ä—Ü—è –Ω–µ–º–∞—î —É –ë–î ‚Äî –≤–≤–∞–∂–∞—î–º–æ —É–≤—ñ–º–∫–Ω–µ–Ω–∏–º
    }

    /**
     * ViewContent ‚Äî –ø–æ–¥—ñ—è –ø–µ—Ä–µ–≥–ª—è–¥—É —Ç–æ–≤–∞—Ä—É/–∫–æ–Ω—Ç–µ–Ω—Ç—É.
     *
     * üîπ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –¥–ª—è –≤—ñ–¥—Å–ª—ñ–¥–∫–æ–≤—É–≤–∞–Ω–Ω—è –≤—ñ–¥–≤—ñ–¥—É–≤–∞–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏ —Ç–æ–≤–∞—Ä—É.
     * üîπ Meta —Ä–µ–∫–æ–º–µ–Ω–¥—É—î –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ –º–∞—Å–∏–≤ contents[] —É —Ñ–æ—Ä–º–∞—Ç—ñ:
     *     [{ "id": "SKU123", "quantity": 1, "item_price": 399.00 }]
     * üîπ –Ø–∫—â–æ contents[] –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–µ ‚Äî –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ "—Ñ–æ–ª–±–µ–∫" –∑ id/sku/price/quantity.
     * üîπ –ó–Ω–∞—á–µ–Ω–Ω—è value = —Å—É–º–∞ (—Ü—ñ–Ω–∞ * –∫—ñ–ª—å–∫—ñ—Å—Ç—å).
     * üîπ –í–∞–ª—é—Ç–∞ –±–µ—Ä–µ—Ç—å—Å—è –∑ –∑–∞–ø–∏—Ç—É –∞–±–æ –∑ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å (default = UAH).
     */
    public function vc(Request $request)
    {
        return $this->handleEvent('ViewContent', $request, function () use ($request) {
    
            // --- 1) –ù–æ–≤–∏–π —Ñ–æ—Ä–º–∞—Ç: contents[] = [{id, quantity, item_price}]
            $contents = $this->contentsFromRequest($request);
    
            if (!empty($contents)) {
                $value = $this->calcValue($contents);
    
                return [
                    'content_type' => 'product',
                    'content_ids'  => array_map(fn($c) => (string)$c['id'], $contents), // –º–∞—Å–∏–≤ ID
                    'contents'     => $contents,                                       // –¥–µ—Ç–∞–ª—ñ —Ç–æ–≤–∞—Ä—ñ–≤
                    'value'        => $value,                                          // —Å—É–º–∞
                    'currency'     => strtoupper(trim((string)$request->input('currency', $this->currency()))), // –≤–∞–ª—é—Ç–∞
                    'content_name' => $request->input('content_name') ?? $request->input('name'), // –Ω–∞–∑–≤–∞ (–æ–ø—Ü.)
                ];
            }
    
            // --- 2) –§–æ–ª–±–µ–∫: –æ–∫—Ä–µ–º—ñ –ø–æ–ª—è (id/sku + price + quantity)
            $pid      = (string)($request->input('id') ?? $request->input('sku') ?? '');
            $price    = $this->num(
                $request->input('price', $request->input('item_price', $request->input('value', 0)))
            );
            $qty      = (int)$request->input('quantity', 1);
            $currency = strtoupper(trim((string)$request->input('currency', $this->currency())));
    
            $data = [
                'content_type' => 'product',
                'content_ids'  => $pid ? [$pid] : [],                // ID —Ç–æ–≤–∞—Ä—É
                'value'        => $this->num($price * max(1, $qty)), // –≤–∞—Ä—Ç—ñ—Å—Ç—å = —Ü—ñ–Ω–∞ * –∫—ñ–ª—å–∫—ñ—Å—Ç—å
                'currency'     => $currency,
            ];
    
            // –¥–æ–¥–∞—î–º–æ contents[], —è–∫—â–æ —î ID
            if ($pid) {
                $data['contents'] = [[
                    'id'         => $pid,
                    'quantity'   => $qty,
                    'item_price' => $price,
                ]];
            }
    
            // –¥–æ–¥–∞—î–º–æ –Ω–∞–∑–≤—É, —è–∫—â–æ –ø–µ—Ä–µ–¥–∞–Ω–∞ (content_name –∞–±–æ name)
            if ($request->filled('content_name') || $request->filled('name')) {
                $data['content_name'] = (string) ($request->input('content_name') ?? $request->input('name'));
            }
    
            return $data;
        }, flag: 'send_view_content');
    }
    


    /**
     * AddToCart ‚Äî –ø–æ–¥—ñ—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—É –≤ –∫–æ—à–∏–∫.
     *
     * üîπ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –¥–ª—è –≤—ñ–¥—Å–ª—ñ–¥–∫–æ–≤—É–≤–∞–Ω–Ω—è –Ω–∞—Ç–∏—Å–∫—É –∫–Ω–æ–ø–∫–∏ ¬´–î–æ–¥–∞—Ç–∏ –≤ –∫–æ—à–∏–∫¬ª.
     * üîπ Meta —Ä–µ–∫–æ–º–µ–Ω–¥—É—î –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ –º–∞—Å–∏–≤ contents[] —É —Ñ–æ—Ä–º–∞—Ç—ñ:
     *     [{ "id": "SKU123", "quantity": 2, "item_price": 799.00 }]
     * üîπ –Ø–∫—â–æ contents[] –Ω–µ–º–∞—î ‚Äî –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ "—Ñ–æ–ª–±–µ–∫" –∑ id/sku/price/quantity.
     * üîπ –ó–Ω–∞—á–µ–Ω–Ω—è value = –∞–±–æ –ø–µ—Ä–µ–¥–∞–Ω–µ —è–≤–Ω–æ, –∞–±–æ –æ–±—á–∏—Å–ª–µ–Ω–µ —è–∫ —Ü—ñ–Ω–∞ * –∫—ñ–ª—å–∫—ñ—Å—Ç—å.
     * üîπ –í–∞–ª—é—Ç–∞ –±–µ—Ä–µ—Ç—å—Å—è –∑ –∑–∞–ø–∏—Ç—É –∞–±–æ –∑ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å (default = UAH).
     */
    public function atc(Request $request)
    {
        return $this->handleEvent('AddToCart', $request, function () use ($request) {
    
            // --- 1) –ù–æ–≤–∏–π —Ñ–æ—Ä–º–∞—Ç: contents[] = [{id, quantity, item_price}]
            $contents = $this->contentsFromRequest($request);
    
            if (!empty($contents)) {
                // –Ø–∫—â–æ —î value —É –∑–∞–ø–∏—Ç—ñ ‚Äî –±–µ—Ä–µ–º–æ –π–æ–≥–æ, —ñ–Ω–∞–∫—à–µ —Ä–∞—Ö—É—î–º–æ —Å–∞–º—ñ
                $value = $request->filled('value')
                    ? $this->num($request->input('value'))
                    : $this->calcValue($contents);
    
                return [
                    'content_type' => 'product',
                    'content_ids'  => array_map(fn($c) => (string)$c['id'], $contents), // –º–∞—Å–∏–≤ ID
                    'contents'     => $contents,                                       // —Ç–æ–≤–∞—Ä–∏ –∑ qty —ñ —Ü—ñ–Ω–∞–º–∏
                    'value'        => $value,                                          // —Å—É–º–∞
                    'currency'     => strtoupper(trim((string)$request->input('currency', $this->currency()))), // –≤–∞–ª—é—Ç–∞
                ];
            }
    
            // --- 2) –§–æ–ª–±–µ–∫: –æ–∫—Ä–µ–º—ñ –ø–æ–ª—è (id/sku + price + quantity)
            $pid      = (string)($request->input('id') ?? $request->input('sku') ?? '');
            $qty      = (int)$request->input('quantity', 1);
            $price    = $this->num($request->input('price', $request->input('item_price', 0)));
            $currency = strtoupper(trim((string)$request->input('currency', $this->currency())));
            $value    = $this->num($qty * $price);
    
            return [
                'content_type' => 'product',
                'content_ids'  => $pid ? [$pid] : [], // –º–∞—Å–∏–≤ —ñ–∑ –æ–¥–Ω–∏–º ID (–∞–±–æ –ø—É—Å—Ç–∏–π)
                'contents'     => $pid ? [[           // contents –∑ –æ–¥–Ω–∏–º –µ–ª–µ–º–µ–Ω—Ç–æ–º
                    'id'         => $pid,
                    'quantity'   => $qty,
                    'item_price' => $price,
                ]] : [],
                'value'        => $value,
                'currency'     => $currency,
            ];
        }, flag: 'send_add_to_cart');
    }
    

    /**
     * InitiateCheckout ‚Äî –ø–æ—á–∞—Ç–æ–∫ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.
     *
     * üîπ –û—Å–Ω–æ–≤–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç: contents[] = [{ id, quantity, item_price }]
     * üîπ Fallback: items[]/—Å—Ç–∞—Ä—ñ –ø–æ–ª—è ‚Üí –Ω–æ—Ä–º–∞–ª—ñ–∑—É—î–º–æ —É contents[]
     * üîπ value = –ø–µ—Ä–µ–¥–∞–Ω–µ —è–≤–Ω–æ –∞–±–æ —Å—É–º–∞ (qty * item_price)
     * üîπ –î–æ–¥–∞—î–º–æ content_ids[] –¥–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ –∑ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è–º–∏ Meta
     * üîπ (–æ–ø—Ü.) content_name ‚Äî —è–∫—â–æ –ø–µ—Ä–µ–¥–∞–Ω–æ
     */
    public function ic(Request $request)
    {
        return $this->handleEvent('InitiateCheckout', $request, function () use ($request) {
    
            // 1) –û—Å–Ω–æ–≤–Ω–∏–π —à–ª—è—Ö: contents[] –∑ —Ç—ñ–ª–∞
            $contents = $this->contentsFromRequest($request);
    
            // 2) Fallback: items[] ‚Üí –ø—Ä–∏–≤–æ–¥–∏–º–æ –¥–æ contents[]
            if (empty($contents)) {
                $items = (array)$request->input('items', []);
                foreach ($items as $i) {
                    $id = (string)($i['variant_sku'] ?? $i['sku'] ?? $i['id'] ?? '');
                    if ($id === '') continue;
                    $qty = (int)($i['quantity'] ?? 1);
                    $pr  = $this->num($i['price'] ?? $i['item_price'] ?? 0);
                    $contents[] = ['id' => $id, 'quantity' => $qty, 'item_price' => $pr];
                }
            }
    
            // 3) –ü—ñ–¥—Å—É–º–∫–∏: –¢–Ü–õ–¨–ö–ò subtotal (–±–µ–∑ shipping/tax)
            $subtotal = $this->calcValue($contents);
            $value    = $request->filled('value')
                ? $this->num($request->input('value'))   // —è–∫—â–æ —è–≤–Ω–æ –ø–µ—Ä–µ–¥–∞–ª–∏ ‚Äî –±–µ—Ä–µ–º–æ —è–∫ —î
                : $this->num($subtotal);                 // —ñ–Ω–∞–∫—à–µ ‚Äî —Å—É–º–∞ –ø–æ–∑–∏—Ü—ñ–π
    
            if ($value < 0) $value = 0.00;
    
            $currency = strtoupper(trim((string)$request->input('currency', $this->currency())));
            $numItems = array_reduce($contents, fn($s, $c) => $s + (int)$c['quantity'], 0);
            $ids      = array_map(fn($c) => (string)$c['id'], $contents);
    
            // 4) custom_data
            $data = [
                'content_type' => 'product',
                'content_ids'  => $ids,
                'contents'     => $contents,
                'num_items'    => $numItems,
                'value'        => $value,
                'currency'     => $currency,
            ];
    
            // –æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ: –Ω–∞–∑–≤–∞ (—è–∫—â–æ –ø—Ä–∏–π—à–ª–∞ –∑ —Ñ—Ä–æ–Ω—Ç–∞)
            if ($request->filled('content_name') || $request->filled('name')) {
                $data['content_name'] = (string)($request->input('content_name') ?? $request->input('name'));
            }
    
            return $data;
        }, flag: 'send_initiate_checkout');
    }
    


    /**
     * Lead ‚Äî –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ª—ñ–¥-–ø–æ–¥—ñ—ó –∑ –¥–æ–≤—ñ–ª—å–Ω–∏–º–∏ –ø–æ–ª—è–º–∏ content_name/status/value.
     */
    public function lead(Request $request)
    {
        return $this->handleEvent('Lead', $request, function () use ($request) {
            return [
                'content_name' => $request->input('content_name', 'lead'),
                'status'       => $request->input('status', 'submitted'),
                'value'        => $this->num($request->input('value', 0)),
                'currency'     => $request->input('currency', $this->currency()),
            ];
        }, flag: 'send_lead');
    }


    /**
     * Purchase ‚Äî –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –ø–æ–∫—É–ø–∫–∏.
     *
     * üîπ –û—Å–Ω–æ–≤–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç: contents[] = [{ id, quantity, item_price }]
     * üîπ Fallback: items[] (variant_sku|sku|id, quantity, price|item_price) ‚Üí –Ω–æ—Ä–º–∞–ª—ñ–∑—É—î–º–æ –¥–æ contents[]
     * üîπ value = –ø–µ—Ä–µ–¥–∞–Ω–µ —è–≤–Ω–æ –∞–±–æ (—Å—É–º–∞ –ø–æ–∑–∏—Üi–π + shipping + tax)
     * üîπ –î–æ–¥–∞—î–º–æ content_ids[], num_items, currency (UPPERCASE)
     * üîπ (–æ–ø—Ü.) content_name / order_number ‚Äî —è–∫—â–æ –ø–µ—Ä–µ–¥–∞–Ω—ñ
     */
    public function purchase(Request $request)
    {
        return $this->handleEvent('Purchase', $request, function () use ($request) {
            // 1) –û—Å–Ω–æ–≤–Ω–∏–π —à–ª—è—Ö: contents[] = [{ id, quantity, item_price }]
            $contents = $this->contentsFromRequest($request);

            // 2) –§–æ–ª–±–µ–∫: items[] ‚Üí –ø—Ä–∏–≤–æ–¥–∏–º–æ –¥–æ contents[]
            if (empty($contents)) {
                $items = (array)$request->input('items', []);
                foreach ($items as $i) {
                    $id = (string)($i['variant_sku'] ?? $i['sku'] ?? $i['id'] ?? '');
                    if ($id === '') continue;
                    $qty = (int)($i['quantity'] ?? 1);
                    $pr  = $this->num($i['price'] ?? $i['item_price'] ?? 0);
                    $contents[] = ['id' => $id, 'quantity' => $qty, 'item_price' => $pr];
                }
            }

           // 3) –°—É–º–∏ / –≤–∞–ª—é—Ç–∞
            $shipping = $this->num($request->input('shipping', 0));
            $tax      = $this->num($request->input('tax', 0));

            // ‚ùó value = —Ç—ñ–ª—å–∫–∏ —Å—É–º–∞ —Ç–æ–≤–∞—Ä—ñ–≤ (subtotal)
            $subtotal = $this->calcValue($contents);

            $value = $request->filled('value')
                ? $this->num($request->input('value'))
                : $this->num($subtotal);

            if ($value < 0) $value = 0.00; // –Ω–∞ –≤—Å—è–∫ –≤–∏–ø–∞–¥–æ–∫ –≤—ñ–¥ –≤—ñ–¥‚Äô—î–º–Ω–∏—Ö

            $currency   = strtoupper((string)$request->input('currency', $this->currency()));
            $numItems   = array_reduce($contents, fn($s, $c) => $s + (int)$c['quantity'], 0);
            $contentIds = array_map(fn($c) => (string)$c['id'], $contents);

            // 4) custom_data –¥–ª—è Meta
            $data = [
                'content_type' => 'product',
                'content_ids'  => $contentIds,
                'contents'     => $contents,
                'num_items'    => $numItems,
                'value'        => $value,
                'currency'     => $currency,
            ];

            // –Ω–µ–æ–±–æ–≤‚Äô—è–∑–∫–æ–≤—ñ –ø–æ–ª—è ‚Äî –¥–æ–¥–∞—î–º–æ, —è–∫—â–æ —î
            if ($shipping > 0) $data['shipping'] = $shipping;
            if ($tax > 0)      $data['tax']      = $tax;

            if ($request->filled('order_number')) {
                $data['order_number'] = (string) $request->input('order_number');
            }
            if ($request->filled('content_name') || $request->filled('name')) {
                $data['content_name'] = (string) ($request->input('content_name') ?? $request->input('name'));
            }

            return $data;
        }, flag: 'send_purchase');
    }




    /* ===================== CORE HANDLER ===================== */

    /**
     * –°–ø—ñ–ª—å–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –≤—Å—ñ—Ö –ø–æ–¥—ñ–π.
     * - —á–∏—Ç–∞—î –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è/–ø—Ä–∞–ø–æ—Ä—Ü—ñ;
     * - –±—É–¥—É—î user_data/custom_data;
     * - —à–ª–µ –ø–æ–¥—ñ—é —á–µ—Ä–µ–∑ MetaCapi;
     * - –ø–æ–≤–µ—Ä—Ç–∞—î JSON-–≤—ñ–¥–ø–æ–≤—ñ–¥—å –∑ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–æ—é –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–æ—é.
     *
     * @param string   $name            –ù–∞–∑–≤–∞ –ø–æ–¥—ñ—ó (PageView, ViewContent, ...)
     * @param Request  $req             HTTP-–∑–∞–ø–∏—Ç
     * @param \Closure $buildCustomData –ö–æ–ª–±–µ–∫, —â–æ –ø–æ–≤–µ—Ä—Ç–∞—î custom_data (–º–∞—Å–∏–≤) –∞–±–æ []
     * @param string   $flag            –ù–∞–∑–≤–∞ –ø—Ä–∞–ø–æ—Ä—Ü—è —É –ë–î (send_view_content —Ç–æ—â–æ)
     */
    private function handleEvent(string $name, Request $req, \Closure $buildCustomData, string $flag)
    {
        $s = $this->settings();
    
        // 0) –ì–ª–æ–±–∞–ª—å–Ω–æ –≤–∏–º–∫–Ω–µ–Ω–æ CAPI
        if (!$s || (int)($s->capi_enabled ?? 0) !== 1) {
            return response()->json(['ok' => true, 'skipped' => 'capi_disabled'], 202);
        }
    
        // 1) –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä–∞–ø–æ—Ä—Ü—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—ó –ø–æ–¥—ñ—ó
        if (!$this->flagEnabled($s, $flag)) {
            return response()->json(['ok' => true, 'skipped' => "flag_{$flag}_disabled"], 202);
        }
    
        // 2) –ê–¥–º—ñ–Ω—Å—å–∫—ñ —É—Ä–ª–∏ ‚Äî –≤—ñ–¥—Å—ñ–∫—Ç–∏
        if ((int)($s->exclude_admin ?? 1) === 1) {
            $url = $this->eventSourceUrl($req);
            if ($this->looksLikeAdmin($url) || $req->is('admin*')) {
                return response()->json(['ok' => true, 'skipped' => 'admin_excluded'], 202);
            }
        }
    
        // 3) –ù–∞—è–≤–Ω—ñ—Å—Ç—å Pixel/Token
        $pixelId = (string)($s->pixel_id ?? '');
        $token   = (string)($s->capi_token ?? '');
        if ($pixelId === '' || $token === '') {
            return response()->json(['ok' => false, 'error' => 'missing_pixel_or_token'], 422);
        }
    
        // 4) –ó—ñ–±—Ä–∞—Ç–∏ user_data —Ç–∞ –∑—É–ø–∏–Ω–∏—Ç–∏—Å—å, —è–∫—â–æ –Ω–µ–º–∞—î –≤–∞–ª—ñ–¥–Ω–æ–≥–æ _fbc
        $ud = $this->userData($req);
        if (empty($ud)) {
            // –Ω–µ–º–∞—î _fbc (–∞–±–æ –≤—ñ–Ω –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä) ‚Üí –ù–ï —à–ª–µ–º–æ –ø–æ–¥—ñ—é
            return response()->json(['ok' => true, 'skipped' => 'no_valid_fbc'], 202);
        }
    
        // 5) custom_data (–∑–∞ –ø–æ—Ç—Ä–µ–±–∏)
        $custom = $buildCustomData();
    
        // 6) –§–æ—Ä–º—É–≤–∞–Ω–Ω—è –ø–æ–¥—ñ—ó
        $event = [
            'event_name'       => $name,
            'event_time'       => (int)($req->input('event_time') ?: time()),
            'action_source'    => 'website',
            'event_source_url' => $this->eventSourceUrl($req),
            'event_id'         => (string)($req->input('event_id') ?: $this->makeEventId($name)),
            'user_data'        => $ud, // –Ω–µ –∑–º—ñ–Ω—é—î–º–æ
        ];
        if (!empty($custom)) {
            $event['custom_data'] = $custom;
        }
    
        // 7) test_event_code (—è–∫—â–æ —î)
        $testCode = $req->input('test_event_code', $s->capi_test_code ?? null);
    
        // 8) –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –¥–æ Meta
        try {
            $capi = new MetaCapi($pixelId, $token, (string)($s->capi_api_version ?? 'v20.0'));
            $resp = $capi->send([$event], $testCode);
        } catch (\Throwable $e) {
            return response()->json([
                'ok'    => false,
                'error' => 'capi_exception',
                'msg'   => $e->getMessage(),
            ], 502);
        }
    
        $body = $resp->json();
    
        if (!$resp->ok() || (is_array($body) && isset($body['error']))) {
            return response()->json([
                'ok'     => false,
                'error'  => 'capi_request_failed',
                'status' => $resp->status(),
                'body'   => $body,
            ], 502);
        }
    
        if (is_array($body) && array_key_exists('events_received', $body) && (int)$body['events_received'] < 1) {
            return response()->json([
                'ok'     => false,
                'error'  => 'events_not_received',
                'status' => $resp->status(),
                'body'   => $body,
            ], 502);
        }
    
        return response()->json([
            'ok'              => true,
            'event'           => $name,
            'events_received' => is_array($body) ? ($body['events_received'] ?? null) : null,
            'fbtrace_id'      => is_array($body) ? ($body['fbtrace_id'] ?? null) : null,
        ], 200);
    }
    
    
    

    /* ===================== HELPERS ===================== */

    /**
     * –û—Ç—Ä–∏–º–∞—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ç—Ä–µ–∫—ñ–Ω–≥—É –∑ –ë–î (—ñ–∑ –∫–µ—à–µ–º –Ω–∞ —Ä—ñ–≤–Ω—ñ –∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä–∞).
     */
    private function settings(): ?object
    {
        if ($this->settingsCache !== null) {
            return $this->settingsCache;
        }
        return $this->settingsCache = DB::table('tracking_settings')->first();
    }

    /**
     * –í–∞–ª—é—Ç–∞ –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º —ñ–∑ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å, fallback ‚Äî UAH.
     */
    private function currency(): string
    {
        $s = $this->settings();
        return $s && !empty($s->default_currency) ? (string)$s->default_currency : 'UAH';
    }

    /**
     * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ —É–≤—ñ–º–∫–Ω–µ–Ω–∏–π –ø–µ–≤–Ω–∏–π –ø—Ä–∞–ø–æ—Ä–µ—Ü—å –ø–æ–¥—ñ—ó —É –ë–î.
     * –Ø–∫—â–æ –ø–æ–ª—è –Ω–µ–º–∞—î ‚Äî –≤–≤–∞–∂–∞—î–º–æ, —â–æ –ø–æ–¥—ñ—è –¥–æ–∑–≤–æ–ª–µ–Ω–∞ (true).
     * –¶–µ –ø–æ–∫—Ä–∏–≤–∞—î –≤–∏–ø–∞–¥–æ–∫ –∑ PageView, –∫–æ–ª–∏ –∫–æ–ª–æ–Ω–∫–∏ send_page_view –º–æ–∂–µ –Ω–µ –±—É—Ç–∏.
     */
    private function flagEnabled(object $s, string $flag): bool
    {
        if (!property_exists($s, $flag)) {
            return true;
        }
        return (int)($s->{$flag} ?? 0) === 1;
    }

    /**
     * –í–∏–∑–Ω–∞—á–∏—Ç–∏ URL –¥–∂–µ—Ä–µ–ª–∞ –ø–æ–¥—ñ—ó:
     * 1) event_source_url –∑ —Ç—ñ–ª–∞, 2) url –∑ —Ç—ñ–ª–∞, 3) Referer, 4) –ø–æ—Ç–æ—á–Ω–∏–π URL.
     */
    private function eventSourceUrl(Request $req): string
    {
        if ($req->filled('event_source_url')) return (string)$req->input('event_source_url');
        if ($req->filled('url'))              return (string)$req->input('url');

        $ref = (string)$req->headers->get('referer', '');
        return $ref !== '' ? $ref : url()->current();
    }

    /**
     * –ü—Ä–æ—Å—Ç–µ –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è ‚Äú–∞–¥–º—ñ–Ω—Å—å–∫–æ–≥–æ‚Äù URL –¥–ª—è –≤—ñ–¥—Å—ñ–∫–∞–Ω–Ω—è –ø–æ–¥—ñ–π.
     */
    private function looksLikeAdmin(string $url): bool
    {
        return str_contains($url, '/admin') || str_contains($url, '/dashboard');
    }

    /**
     * –ù–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—è —á–∏—Å–ª–æ–≤–∏—Ö –∑–Ω–∞—á–µ–Ω—å (—Ü—ñ–Ω–∏ —Ç–æ—â–æ):
     * - –∫–æ–º–∏ ‚Üí –∫—Ä–∞–ø–∫–∏,
     * - –ø—Ä–∏–±—Ä–∞—Ç–∏ –≤—Å–µ, –∫—Ä—ñ–º —Ü–∏—Ñ—Ä/–∫—Ä–∞–ø–∫–∏/–º—ñ–Ω—É—Å–∞,
     * - –ø—Ä–∏–≤–µ—Å—Ç–∏ –¥–æ float —ñ –æ–∫—Ä—É–≥–ª–∏—Ç–∏ –¥–æ 2-—Ö –∑–Ω–∞–∫—ñ–≤.
     */
    private function num($v): float
    {
        $s = str_replace(',', '.', (string)$v);
        $clean = preg_replace('/[^\d\.\-]/', '', $s);
        $n = (float)$clean;
        return round($n, 2);
    }

    /**
     * SHA-256 –¥–ª—è PII (email, —ñ–º‚Äô—è —Ç–æ—â–æ) –∑ –Ω–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—î—é –¥–æ –Ω–∏–∂–Ω—å–æ–≥–æ —Ä–µ–≥—ñ—Å—Ç—Ä—É —ñ —Ç—Ä–∏–º–æ–º.
     * –Ø–∫—â–æ –Ω–∞ –≤—Ö—ñ–¥ –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –ø–æ—Ä–æ–∂–Ω—î –∑–Ω–∞—á–µ–Ω–Ω—è ‚Äî –ø–æ–≤–µ—Ä—Ç–∞—î null.
     */
    private function sha256(?string $v): ?string
    {
        if (!$v) return null;
        $v = trim(mb_strtolower($v));
        return $v === '' ? null : hash('sha256', $v);
    }

    /**
     * –ù–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—è —Ç–µ–ª–µ—Ñ–æ–Ω—É –¥–æ —Ü–∏—Ñ—Ä (E.164 –±–µ–∑ ‚Äú+‚Äù, —è–∫—â–æ –≤–∂–µ –º—ñ–∂–Ω–∞—Ä–æ–¥–Ω–∏–π).
     * –Ø–∫—â–æ –ø–æ—Ä–æ–∂–Ω—å–æ ‚Äî –ø–æ–≤–µ—Ä—Ç–∞—î null.
     */
    private function normPhone(?string $p): ?string
    {
        if (!$p) return null;
        $digits = preg_replace('/\D+/', '', $p);
        return $digits === '' ? null : $digits;
    }

    /**
     * –í–∏—Ç—è–≥–Ω—É—Ç–∏ fbclid –∑ URL (—â–æ–± –∑—ñ–±—Ä–∞—Ç–∏ _fbc, —è–∫—â–æ cookie –Ω–µ–º–∞—î).
     */
    private function parseFbclid(?string $url): ?string
    {
        if (!$url) return null;
        if (preg_match('/[?&]fbclid=([^&#]+)/', $url, $m)) {
            return $m[1]; // —Ç—É—Ç –≤–æ–Ω–æ –±–µ—Ä–µ—Ç—å—Å—è "—è–∫ —î"
        }
        return null;
    }

    /**
     * –§–æ—Ä–º—É—î user_data –¥–ª—è Meta CAPI.
     *
     * - IP / User-Agent –∑–∞–≤–∂–¥–∏ (IP –±–µ—Ä–µ—Ç—å—Å—è –∑ CF-Connecting-IP / X-Forwarded-For, —ñ–Ω–∞–∫—à–µ Request::ip()).
     * - _fbc: —ñ–∑ cookie as-is –∞–±–æ –±—É–¥—É—î—Ç—å—Å—è –∑ fbclid —É URL (—á–µ—Ä–µ–∑ pickFbc()), –±–µ–∑ –∑–º—ñ–Ω —Ä–µ–≥—ñ—Å—Ç—Ä—É/–¥–µ–∫–æ–¥—É–≤–∞–Ω–Ω—è.
     * - _fbp: —ñ–∑ cookie as-is.
     * - external_id: –Ω–µ —Ö–µ—à—É—î—Ç—å—Å—è (—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è Meta), –æ–±—Ä—ñ–∑–∞—î—Ç—å—Å—è –¥–æ 128 —Å–∏–º–≤–æ–ª—ñ–≤.
     * - PII (email, phone, fn, ln): —Ç—ñ–ª—å–∫–∏ SHA-256 –ø—ñ—Å–ª—è –Ω–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—ó.
     * - –Ø–∫—â–æ –Ω–µ–º–∞—î –≤–∞–ª—ñ–¥–Ω–æ–≥–æ _fbc ‚Üí –ø–æ–≤–µ—Ä—Ç–∞—î [], –∞ handleEvent –º–∞—î –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ –ø–æ–¥—ñ—é (202).
     */

    // ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    // –§–æ—Ä–º—É–≤–∞–Ω–Ω—è user_data –¥–ª—è Meta CAPI
    // ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    private function userData(Request $req): array
    {
        // IP + User-Agent ‚Äî –±–∞–∑–æ–≤—ñ –∫–ª—é—á—ñ –¥–ª—è –º–∞—Ç—á–∏–Ω–≥—É
        $data = [
            'client_ip_address' => $this->realIp($req),
            'client_user_agent' => (string) $req->userAgent(),
        ];

        // _fbc ‚Äî –¥–æ–¥–∞—î–º–æ —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ —î –≤–∞–ª—ñ–¥–Ω–∏–π (–∞–ª–µ –ù–ï –≤—ñ–¥–∫–∏–¥–∞—î–º–æ –ø–æ–¥—ñ—é, —è–∫—â–æ –π–æ–≥–æ –Ω–µ–º–∞)
        if ($fbc = $this->pickFbc($req)) {
            $data['fbc'] = $fbc;
        }

        // _fbp ‚Äî –≤—ñ–¥–¥–∞—î–º–æ "—è–∫ —î" —ñ–∑ cookie (–Ω—ñ—è–∫–∏—Ö trim/—Ö–µ—à—ñ–≤)
        $fbp = $req->cookie('_fbp');
        if (is_string($fbp) && $fbp !== '') {
            $data['fbp'] = $fbp;
        }

        // external_id ‚Äî –Ω–µ–æ–±–æ–≤‚Äô—è–∑–∫–æ–≤–∏–π; —è–∫—â–æ —î, —à–ª–µ–º–æ —Ç–∞–∫–∏–º, —è–∫ –≤–∏—Ä—ñ—à–∏–ª–∏ –±—ñ–∑–Ω–µ—Å-–ø—Ä–∞–≤–∏–ª–∞–º–∏
        // (–º–æ–∂–Ω–∞ raw UUID, –∞ –º–æ–∂–Ω–∞ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ –∑–∞—Ö–µ—à—É–≤–∞—Ç–∏ ‚Äî –≥–æ–ª–æ–≤–Ω–µ: –æ–¥–Ω–∞–∫–æ–≤–æ —É Browser —ñ Server)
        $ext = $req->cookie('_extid');
        if (is_string($ext) && ($ext = trim($ext)) !== '') {
            $data['external_id'] = mb_substr($ext, 0, 128);
        } elseif ($req->filled('external_id')) {
            $extBody = trim((string) $req->input('external_id'));
            if ($extBody !== '') {
                $data['external_id'] = mb_substr($extBody, 0, 128);
            }
        }

        // PII ‚Äî –¢–Ü–õ–¨–ö–ò SHA-256 –ø—ñ—Å–ª—è –Ω–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—ó –∑–Ω–∞—á–µ–Ω—å
        if ($em = $this->normEmail($req->input('email'))) {
            $data['em'] = hash('sha256', $em);
        }
        if ($pn = $this->normPhone($req->input('phone'))) {
            $data['ph'] = hash('sha256', $pn);
        }
        if ($fn = $this->normName($req->input('first_name') ?? $req->input('fn'))) {
            $data['fn'] = hash('sha256', $fn);
        }
        if ($ln = $this->normName($req->input('last_name') ?? $req->input('ln'))) {
            $data['ln'] = hash('sha256', $ln);
        }

        return $data;
    }


    private function realIp(Request $req): string
    {
        foreach (['CF-Connecting-IP', 'X-Forwarded-For'] as $h) {
            $v = (string) $req->headers->get($h, '');
            if ($v !== '') {
                return trim(explode(',', $v)[0]);
            }
        }
        return (string) $req->ip();
    }

    
    // ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    // –í–∞–ª—ñ–¥–Ω–∏–π fallback –¥–ª—è _fbc (–±–µ–∑ –∑–º—ñ–Ω cookie)
    // ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    private function pickFbc(Request $req): ?string
    {
        // 1) –Ø–∫—â–æ —î cookie _fbc ‚Äî –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ —è–∫ —î (–∂–æ–¥–Ω–∏—Ö trim/strtolower/urldecode)
        $cookie = $req->cookie('_fbc');
        if (is_string($cookie) && $cookie !== '') {
            // –Ø–∫—â–æ —Ü–µ —è–≤–Ω–∏–π –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä —Ç–∏–ø—É "...fbclid" ‚Äî –≤–≤–∞–∂–∞—î–º–æ –Ω–µ–≤–∞–ª—ñ–¥–Ω–∏–º
            if (preg_match('/\.fbclid$/', $cookie)) {
                return null;
            }
            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –±–∞–∑–æ–≤–∏–π —Ñ–æ—Ä–º–∞—Ç: fb.<–≤–µ—Ä—Å—ñ—è>.<13-–∑–Ω–∞—á–Ω—ñ –º—Å>.<—â–æ—Å—å>
            if (preg_match('/^fb\.\d\.\d{13}\..+$/', $cookie)) {
                return $cookie; // –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ 1:1, —ñ–Ω–∞–∫—à–µ Meta –≤–≤–∞–∂–∞—Ç–∏–º–µ "–∏–∑–º–µ–Ω—ë–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ"
            }
            // –î–∏–≤–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç? –ö—Ä–∞—â–µ –Ω—ñ—á–æ–≥–æ –Ω–µ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—Ç–∏, –Ω—ñ–∂ –ø—Å—É–≤–∞—Ç–∏ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫—É Meta
            return null;
        }

        // 2) Cookie –Ω–µ–º–∞—î ‚Äî –ø—Ä–æ–±—É—î–º–æ –∑—ñ–±—Ä–∞—Ç–∏ _fbc –∑ fbclid –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ URL
        //    –í–ê–ñ–õ–ò–í–û: fbclid –±–µ—Ä–µ–º–æ —Å–∏—Ä–∏–º, –±–µ–∑ –∑–º—ñ–Ω–∏ —Ä–µ–≥—ñ—Å—Ç—Ä—É/–¥–µ–∫–æ–¥—É–≤–∞–Ω–Ω—è
        $srcUrl = $this->eventSourceUrl($req);
        $fbclid = $this->parseFbclid($srcUrl) ?? $req->query('fbclid');

        if (is_string($fbclid) && $fbclid !== '' && $fbclid !== 'fbclid') {
            // –ü—Ä–µ—Ñ—ñ–∫—Å –º–∞—î –±—É—Ç–∏ fb.2., –∞ –º—ñ—Ç–∫–∞ —á–∞—Å—É ‚Äî —É –º—ñ–ª—ñ—Å–µ–∫—É–Ω–¥–∞—Ö (13 —Ü–∏—Ñ—Ä)
            $ms = now()->valueOf(); // 13-–∑–Ω–∞—á–Ω—ñ –º—Å
            return 'fb.2.' . $ms . '.' . $fbclid;
        }

        // 3) –ù–µ–º–∞ –Ω—ñ cookie, –Ω—ñ fbclid ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–µ –¥–æ–¥–∞—î–º–æ fbc (—Ü–µ –û–ö)
        return null;
    }




    /**
     * –ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ event_id, —è–∫–∏–π —Å—É–º—ñ—Å–Ω–∏–π —ñ–∑ —Ñ—Ä–æ–Ω—Ç–æ–º (–¥–ª—è –¥–µ–¥—É–ø–ª—ñ–∫–∞—Ü—ñ—ó).
     * –§–æ—Ä–º–∞—Ç: <Name>-<12 hex>-<unix time>.
     */
    private function makeEventId(string $name): string
    {
        return $name . '-' . bin2hex(random_bytes(6)) . '-' . time();
    }

    /**
     * –ü—Ä–æ—á–∏—Ç–∞—Ç–∏ —ñ –Ω–æ—Ä–º–∞–ª—ñ–∑—É–≤–∞—Ç–∏ contents[] –∑ —Ç—ñ–ª–∞ –∑–∞–ø–∏—Ç—É.
     * –Ø–∫—â–æ –Ω–µ–º–∞—î –∞–±–æ —Ñ–æ—Ä–º–∞—Ç –Ω–µ –º–∞—Å–∏–≤ ‚Äî –ø–æ–≤–µ—Ä–Ω—É—Ç–∏ [].
     */
    private function contentsFromRequest(Request $req): array
    {
        $raw = $req->input('contents');
        if (!is_array($raw)) return [];

        $out = [];
        foreach ($raw as $c) {
            $id = (string)($c['id'] ?? $c['sku'] ?? '');
            if ($id === '') continue;
            $qty = (int)($c['quantity'] ?? 1);
            $pr  = $this->num($c['item_price'] ?? $c['price'] ?? 0);
            $out[] = ['id' => $id, 'quantity' => $qty, 'item_price' => $pr];
        }
        return $out;
    }

    /**
     * –ü–æ—Ä–∞—Ö—É–≤–∞—Ç–∏ –∑–∞–≥–∞–ª—å–Ω—É –≤–∞—Ä—Ç—ñ—Å—Ç—å –ø–æ contents[].
     */
    private function calcValue(array $contents): float
    {
        $sum = 0.0;
        foreach ($contents as $c) {
            $sum += (int)$c['quantity'] * (float)$c['item_price'];
        }
        return $this->num($sum);
    }
}
